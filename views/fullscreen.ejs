<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fullscreen Stream</title>
    <link rel="stylesheet" href="/screen-capture-styles.css">
    <style>
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
            overflow: hidden;
        }
        #screen {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }
    </style>
</head>
<body>
    <div id="panel-area">
        <div id="panel">
            <!-- Buttons will be dynamically added here -->
        </div>
    </div>
    <div id="error-container"></div>
    <canvas id="screen"></canvas>
    <div id="debug"></div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/pako/2.1.0/pako.min.js"></script>
    <script>
        const canvas = document.getElementById('screen');
        const ctx = canvas.getContext('2d');
        const panel = document.getElementById('panel');
        const debug = document.getElementById('debug');
        const errorContainer = document.getElementById('error-container');
        const ws = new WebSocket('ws://' + window.location.host + '/ws');

        let currentDisplay = parseInt('<%= initialDisplay %>');

        function log(message) {
            console.log(message);
            debug.innerHTML += message + '<br>';
            debug.scrollTop = debug.scrollHeight;
        }

        function showError(message) {
            errorContainer.innerHTML = `<div class="error-message">${message}</div>`;
        }

        let imgObj = new Image();
        imgObj.onload = function() {
            canvas.width = imgObj.width;
            canvas.height = imgObj.height;
            ctx.drawImage(imgObj, 0, 0);
        };

        ws.onopen = () => {
            log('WebSocket connected');
            ws.send(JSON.stringify({ type: 'requestDisplayCount' }));
            selectDisplay(currentDisplay);
        };

        ws.onclose = () => {
            log('WebSocket disconnected');
        };

        ws.onerror = (error) => {
            log('WebSocket error: ' + error.message);
        };

        ws.onmessage = (event) => {
            try {
                const message = JSON.parse(event.data);
                if (message.type === 'frame' && message.display === currentDisplay) {
                    const compressed = atob(message.data);
                    const charData = compressed.split('').map(x => x.charCodeAt(0));
                    const binData = new Uint8Array(charData);
                    const data = pako.inflate(binData);
                    const blob = new Blob([data], { type: 'image/jpeg' });
                    const url = URL.createObjectURL(blob);
                    imgObj.src = url;
                } else if (message.type === 'displayCount') {
                    log('Display count received: ' + message.count);
                    createButtons(message.count);
                } else if (message.type === 'error') {
                    log('Error received: ' + message.message);
                    showError(message.message);
                }
            } catch (e) {
                log('Error processing message: ' + e.message);
            }
        };

        function createButtons(count) {
            panel.innerHTML = '';
            for (let i = 0; i < count; i++) {
                const button = document.createElement('button');
                button.className = 'action-button';
                button.innerHTML = `<span>Monitor ${i + 1}</span>`;
                button.addEventListener('click', () => selectDisplay(i));
                panel.appendChild(button);
            }
            updateActiveButton();
        }

        function selectDisplay(displayIndex) {
            if (currentDisplay !== displayIndex) {
                ws.send(JSON.stringify({ type: 'unselectDisplay', display: currentDisplay }));
            }
            currentDisplay = displayIndex;
            ws.send(JSON.stringify({ type: 'selectDisplay', display: currentDisplay }));
            updateActiveButton();
        }

        function updateActiveButton() {
            document.querySelectorAll('.action-button').forEach((btn, index) => {
                btn.classList.toggle('active', index === currentDisplay);
            });
        }

        window.addEventListener('beforeunload', () => {
            ws.send(JSON.stringify({ type: 'unselectDisplay', display: currentDisplay }));
        });
    </script>
</body>
</html>