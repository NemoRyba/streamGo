<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Fullscreen Stream</title>
    <link rel="stylesheet" href="/screen-capture-styles.css">
    <style>
        body, html {
            margin: 0;
            padding: 0;
            height: 100%;
            overflow: hidden;
        }
        #screen {
            width: 100%;
            height: 100%;
            object-fit: contain;
        }
        #debug {
            position: fixed;
            top: 10px;
            left: 10px;
            background: rgba(0,0,0,0.7);
            color: white;
            padding: 10px;
            font-family: monospace;
            max-height: 200px;
            overflow-y: auto;
        }
    </style>
</head>
<body>
    <div id="panel-area">
        <div id="panel">
            <!-- Buttons will be dynamically added here -->
        </div>
    </div>
    <div id="error-container"></div>
    <canvas id="screen"></canvas>
    <div id="debug"></div>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/pako/2.1.0/pako.min.js"></script>
    <script>
        const canvas = document.getElementById('screen');
        const ctx = canvas.getContext('2d');
        const panel = document.getElementById('panel');
        const debug = document.getElementById('debug');
        const errorContainer = document.getElementById('error-container');
        const ws = new WebSocket('ws://' + window.location.host + '/ws?username=' + encodeURIComponent('<%= user.username %>'));

        let currentDisplay = parseInt('<%= initialDisplay %>');

        function log(message) {
            console.log(message);
            debug.innerHTML += message + '<br>';
            debug.scrollTop = debug.scrollHeight;
        }

        function showError(message) {
            errorContainer.innerHTML = `<div class="error-message">${message}</div>`;
            log('Error: ' + message);
        }

        let imgObj = new Image();
        imgObj.onload = function() {
            log('Image loaded, dimensions: ' + imgObj.width + 'x' + imgObj.height);
            canvas.width = imgObj.width;
            canvas.height = imgObj.height;
            ctx.drawImage(imgObj, 0, 0);
            log('Image drawn to canvas');
        };

        imgObj.onerror = function(error) {
            log('Error loading image: ' + error);
        };

        function fetchFullFrame(display) {
            log('Fetching full frame for display: ' + display);
            fetch(`/api/latest-frame?display=${display}&t=${new Date().getTime()}`)
                .then(response => {
                    if (!response.ok) {
                        throw new Error('Network response was not ok');
                    }
                    return response.blob();
                })
                .then(blob => {
                    log('Received frame blob, size: ' + blob.size);
                    const url = URL.createObjectURL(blob);
                    imgObj.src = url;
                })
                .catch(error => {
                    showError('Error fetching frame: ' + error.message);
                });
        }

        ws.onopen = () => {
            log('WebSocket connected');
            ws.send(JSON.stringify({ type: 'requestDisplayCount' }));
            selectDisplay(currentDisplay);
        };

        ws.onclose = () => {
            log('WebSocket disconnected');
        };

        ws.onerror = (error) => {
            log('WebSocket error: ' + error.message);
        };

        ws.onmessage = (event) => {
            try {
                const message = JSON.parse(event.data);
                log('Received message type: ' + message.type);
                if (message.type === 'previewAvailable' && message.display === currentDisplay) {
                    log('Preview available for current display. Fetching full frame.');
                    fetchFullFrame(currentDisplay);
                } else if (message.type === 'displayCount') {
                    log('Display count received: ' + message.count);
                    createButtons(message.count);
                } else if (message.type === 'error') {
                    showError('Error received: ' + message.message);
                }
            } catch (e) {
                showError('Error processing message: ' + e.message);
            }
        };

        function createButtons(count) {
            panel.innerHTML = '';
            for (let i = 0; i < count; i++) {
                const button = document.createElement('button');
                button.className = 'action-button';
                button.innerHTML = `<span>Monitor ${i}</span>`;
                button.addEventListener('click', () => selectDisplay(i));
                panel.appendChild(button);
            }
            updateActiveButton();
        }

        function selectDisplay(displayIndex) {
            log('Selecting display: ' + displayIndex);
            if (currentDisplay !== displayIndex) {
                ws.send(JSON.stringify({ type: 'unselectDisplay', display: currentDisplay }));
            }
            currentDisplay = displayIndex;
            ws.send(JSON.stringify({ type: 'selectDisplay', display: currentDisplay }));
            updateActiveButton();
            fetchFullFrame(currentDisplay);  // Fetch initial frame for the selected display
        }

        function updateActiveButton() {
            document.querySelectorAll('.action-button').forEach((btn, index) => {
                btn.classList.toggle('active', index === currentDisplay);
            });
        }

        window.addEventListener('beforeunload', () => {
            ws.send(JSON.stringify({ type: 'unselectDisplay', display: currentDisplay }));
        });
    </script>
</body>
</html>