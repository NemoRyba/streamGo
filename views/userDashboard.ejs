<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>User Dashboard</title>
    <link rel="stylesheet" href="/dashboard.css">
    <link rel="stylesheet" href="/screen-capture-styles.css">
    <style>
        .stream-preview {
            width: 200px;
            height: 150px;
            border: 2px solid #333;
            margin: 20px;
            cursor: pointer;
            overflow: visible;
            position: relative;
        }
        .stream-preview img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        #displayMenu {
            display: none;
            position: absolute;
            background: rgba(0, 0, 0, 0.9);
            padding: 10px;
            border-radius: 5px;
            z-index: 10;
            min-width: 120px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
        #displayMenu button {
            display: block;
            width: 100%;
            padding: 8px 10px;
            margin: 5px 0;
            background: none;
            border: none;
            color: white;
            cursor: pointer;
            text-align: left;
            transition: background-color 0.3s;
        }
        #displayMenu button:hover {
            background: rgba(255, 255, 255, 0.2);
        }
    </style>
</head>
<body>
    <div class="container">
        <a href="/logout" class="logout">Logout</a>
        <h1>Welcome, <%= user.username %>!</h1>
        <div class="stream-preview" id="streamPreview">
            <img src="/api/latest-frame" alt="Stream Preview" width="200" height="150">
            <div id="displayMenu"></div>
        </div>
    </div>



    <script>
const username = '<%= user.username %>';
        const socket = new WebSocket('ws://' + window.location.host + '/ws?username=' + encodeURIComponent(username));
        const streamPreview = document.getElementById('streamPreview');
        const displayMenu = document.getElementById('displayMenu');
        let displayCount = 0;
        let selectedDisplay = 0;
        let previewRequestInProgress = false;
        let fullscreenWindows = {};
        function updatePreviewImage() {
            const img = streamPreview.querySelector('img');
            const newSrc = `/api/latest-preview?display=${selectedDisplay}&t=${new Date().getTime()}`;
            console.log('Updating preview image with src:', newSrc);
            img.src = newSrc;
        }

        function requestLatestPreview() {
            if (!previewRequestInProgress && selectedDisplay !== null) {
                console.log('Requesting latest preview for display:', selectedDisplay);
                previewRequestInProgress = true;
                socket.send(JSON.stringify({ type: 'requestLatestPreview', display: selectedDisplay }));
            }
        }

        streamPreview.addEventListener('click', (event) => {
            event.stopPropagation();
            console.log('Stream preview clicked');
            const rect = streamPreview.getBoundingClientRect();
            const x = event.clientX - rect.left;
            const y = event.clientY - rect.top;
            toggleDisplayMenu(x, y);
        });

        document.addEventListener('click', (event) => {
            if (!streamPreview.contains(event.target)) {
                displayMenu.style.display = 'none';
            }
        });

        function toggleDisplayMenu(x, y) {
            if (displayMenu.style.display === 'block') {
                displayMenu.style.display = 'none';
            } else {
                displayMenu.style.display = 'block';
                displayMenu.style.left = `${x}px`;
                displayMenu.style.top = `${y}px`;
                
                if (displayCount === 0) {
                    socket.send(JSON.stringify({ type: 'requestDisplayCount' }));
                }
            }
        }

        function createDisplayButtons(count) {
            console.log('Creating display buttons, count:', count);
            displayMenu.innerHTML = '';
            for (let i = 0; i < count; i++) {
                const button = document.createElement('button');
                button.textContent = `Display ${i}`;
                button.onclick = () => {
                    selectDisplay(i);
                    displayMenu.style.display = 'none';
                };
                displayMenu.appendChild(button);
            }
        }

        function selectDisplay(display) {
            console.log('Selecting display:', display);
            selectedDisplay = display;
            requestLatestPreview();
            updatePreviewImage();
            openFullscreen(display);
        }

        function openFullscreen(display) {
            const windowName = `FullscreenStream_${display}`;
            
            // Close the existing window if it's open
            if (fullscreenWindows[display] && !fullscreenWindows[display].closed) {
                fullscreenWindows[display].close();
            }
            
            // Open a new window
            fullscreenWindows[display] = window.open(`/fullscreen?display=${display}`, windowName, 'width=800,height=600');
            
            // Add an event listener to remove the reference when the window is closed
            fullscreenWindows[display].addEventListener('beforeunload', () => {
                fullscreenWindows[display] = null;
            });
        }

        socket.onopen = function(event) {
            console.log('WebSocket connection opened');
            socket.send(JSON.stringify({ type: 'requestDisplayCount' }));
        };

        socket.onmessage = function(event) {
            try {
                const data = JSON.parse(event.data);
                console.log('Received data:', data);
                if (data.type === 'displayCount') {
                    displayCount = data.count;
                    console.log('Display count:', displayCount);
                    createDisplayButtons(displayCount);
                } else if (data.type === 'previewAvailable') {
                    if (data.display === selectedDisplay) {
                        console.log('New preview available, updating image');
                        updatePreviewImage();
                        previewRequestInProgress = false;
                    }
                } else if (data.type === 'error') {
                    console.error('Error:', data.message);
                    alert(data.message);
                    previewRequestInProgress = false;
                }
            } catch (error) {
                console.error('Error parsing message:', error);
            }
        };

        socket.onerror = function(error) {
            console.error('WebSocket error:', error);
        };

        socket.onclose = function(event) {
            console.log('WebSocket connection closed');
        };

        // Request a new preview every 5 seconds
        setInterval(() => {
            if (selectedDisplay !== null) {
                requestLatestPreview();
            }
        }, 5000);
    </script>
</body>
</html>