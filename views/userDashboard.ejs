<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard</title>
    <link rel="stylesheet" href="/dashboard.css">
    <style>
        .folder {
            cursor: pointer;
            padding: 10px;
            background-color: #f0f0f0;
            margin-bottom: 5px;
        }
        .folder:hover {
            background-color: #e0e0e0;
        }
        .session-list {
            display: none;
            margin-left: 20px;
        }
        .back-button {
            display: none;
            margin-bottom: 10px;
        }
        #reloadControls {
            margin-bottom: 20px;
        }
        #streamPreview {
            margin-top: 20px;
            text-align: center;
        }
        #streamPreview img {
            max-width: 100%;
            height: auto;
        }
    </style>
</head>
<body>
    <div class="container">
        <a href="/admin/logout" class="logout">Logout</a>
        <h1>Welcome, <%= user.username %>!</h1>
        <div id="reloadControls">
            <select id="reloadInterval">
                <option value="3">3 sec</option>
                <option value="5">5 sec</option>
                <option value="10">10 sec</option>
            </select>
            <button id="forceRefresh">Force Refresh</button>
        </div>
        <h2>Active Sessions</h2>
        <button id="backButton" class="back-button">Back to Users</button>
        <div id="sessionList"></div>
        <div id="streamPreview">
            <h3>Stream Preview</h3>
            <div id="displayButtons"></div>
            <img src="" alt="Stream Preview" style="display: none;">
        </div>
    </div>

    <div id="debugConsole"></div>
    <script>
        const username = '<%= user.username %>';
        let socket;
        const sessionList = document.getElementById('sessionList');
        const debugConsole = document.getElementById('debugConsole');
        const backButton = document.getElementById('backButton');
        const reloadIntervalSelect = document.getElementById('reloadInterval');
        const forceRefreshButton = document.getElementById('forceRefresh');
        const streamPreview = document.getElementById('streamPreview');
        const displayButtons = document.getElementById('displayButtons');
        let currentView = 'users';
        let refreshInterval;
        let selectedDisplay = 0;
        let displayCount = 0;

        function initializeWebSocket() {
            socket = new WebSocket('wss://' + window.location.host + '/admin?username=' + encodeURIComponent(username));

            socket.onopen = () => {
                debug('WebSocket connected');
                refreshData();
                setRefreshInterval();
            };

            socket.onclose = () => {
                debug('WebSocket disconnected. Attempting to reconnect...');
                setTimeout(initializeWebSocket, 5000);
            };

            socket.onerror = (error) => {
                debug('WebSocket error: ' + error.message);
            };

            socket.onmessage = function(event) {
                try {
                    const data = JSON.parse(event.data);
                    console.log('Received data:', data);
                    if (data.type === 'sessionList') {
                        updateSessionList(data.sessions);
                    } else if (data.type === 'displayCount') {
                        displayCount = data.count;
                        console.log('Display count:', displayCount);
                        createDisplayButtons(displayCount);
                    } else if (data.type === 'frameAvailable') {
                        if (data.display === selectedDisplay) {
                            console.log('New frame available, updating preview');
                            updatePreviewImage();
                        }
                    } else if (data.type === 'frame') {
                        updatePreviewImage(data.data);
                    } else if (data.type === 'forceLogout') {
                        console.log('Received force logout signal');
                        alert('Your session has been terminated. You will be logged out.');
                        window.location.href = '/admin/login';
                    } else if (data.type === 'error') {
                        console.error('Error:', data.message);
                        alert(data.message);
                    }
                } catch (error) {
                    console.error('Error parsing message:', error);
                }
            };
        }

        initializeWebSocket();

        function debug(message) {
            console.log(message);
            debugConsole.innerHTML += message + '<br>';
            debugConsole.scrollTop = debugConsole.scrollHeight;
        }

        function refreshData() {
            if (socket.readyState === WebSocket.OPEN) {
                socket.send(JSON.stringify({ type: 'requestSessionList' }));
            }
        }

        function setRefreshInterval() {
            clearInterval(refreshInterval);
            const interval = parseInt(reloadIntervalSelect.value) * 1000;
            refreshInterval = setInterval(refreshData, interval);
        }

        reloadIntervalSelect.addEventListener('change', setRefreshInterval);
        forceRefreshButton.addEventListener('click', refreshData);
        
        function updatePreviewImage(frameData) {
            const img = streamPreview.querySelector('img');
            if (frameData) {
                img.src = 'data:image/jpeg;base64,' + frameData;
            } else {
                img.src = `/api/latest-frame?display=${selectedDisplay}&t=${new Date().getTime()}`;
            }
            img.style.display = 'block';
        }

        function createDisplayButtons(count) {
            displayButtons.innerHTML = '';
            for (let i = 0; i < count; i++) {
                const button = document.createElement('button');
                button.textContent = `Display ${i}`;
                button.onclick = () => selectDisplay(i);
                displayButtons.appendChild(button);
            }
        }

        function selectDisplay(display) {
            selectedDisplay = display;
            console.log('Selected display:', display);
            if (socket.readyState === WebSocket.OPEN) {
                socket.send(JSON.stringify({ type: 'requestFrame', display: display }));
            }
        }

        function updateSessionList(sessions) {
            sessionList.innerHTML = '';
            if (currentView === 'users') {
                Object.keys(sessions).forEach(username => {
                    const folder = document.createElement('div');
                    folder.className = 'folder';
                    folder.textContent = `${username} (${sessions[username].length})`;
                    folder.onclick = () => showUserSessions(username, sessions[username]);
                    
                    const terminateButton = document.createElement('button');
                    terminateButton.textContent = 'Terminate All';
                    terminateButton.onclick = (e) => {
                        e.stopPropagation();
                        terminateUserSessions(username);
                    };
                    folder.appendChild(terminateButton);
                    
                    sessionList.appendChild(folder);
                });
            }
        }

        function showUserSessions(username, userSessions) {
            currentView = 'sessions';
            sessionList.innerHTML = '';
            backButton.style.display = 'block';
            
            userSessions.forEach(session => {
                const li = document.createElement('li');
                li.textContent = `${session.type} - ${session.id} `;
                const terminateButton = document.createElement('button');
                terminateButton.textContent = 'Terminate';
                terminateButton.onclick = () => terminateSession(session.id);
                li.appendChild(terminateButton);
                sessionList.appendChild(li);
            });
        }

        backButton.onclick = () => {
            currentView = 'users';
            backButton.style.display = 'none';
            refreshData();
        };

        function terminateSession(sessionId) {
            debug('Terminating session: ' + sessionId);
            if (socket.readyState === WebSocket.OPEN) {
                socket.send(JSON.stringify({ type: 'terminateSession', sessionId }));
            }
        }

        function terminateUserSessions(username) {
            debug('Terminating all sessions for user: ' + username);
            if (socket.readyState === WebSocket.OPEN) {
                socket.send(JSON.stringify({ type: 'terminateUserSessions', username }));
            }
        }

        // Request a new frame every 3 seconds
        setInterval(() => {
            if (socket.readyState === WebSocket.OPEN) {
                console.log('Requesting latest frame');
                socket.send(JSON.stringify({ type: 'requestFrame', display: selectedDisplay }));
            }
        }, 3000);

        // Initial request for display count
        setTimeout(() => {
            if (socket.readyState === WebSocket.OPEN) {
                socket.send(JSON.stringify({ type: 'requestDisplayCount' }));
            }
        }, 1000);

    </script>
</body>
</html>